openapi: 3.0.3
info:
  title: ALX Travel App API
  version: 1.0.0
  description: API for managing property listings, bookings, payments, reviews, and
    messaging.
paths:
  /api/bookings/:
    get:
      operationId: apiBookingsList
      description: Authenticated users can create and view their bookings. Hosts can
        view bookings for their properties. Only booking creators can modify or cancel
        bookings.
      summary: Manage bookings
      tags:
      - Bookings
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
              examples:
                BookingExample:
                  value:
                  - id: 12
                    property: 5
                    user: 3
                    check_in: '2025-08-01'
                    check_out: '2025-08-05'
                    status: confirmed
                  summary: Booking example
          description: List of bookings retrieved successfully.
    post:
      operationId: apiBookingsCreate
      description: Authenticated users can create and view their bookings. Hosts can
        view bookings for their properties. Only booking creators can modify or cancel
        bookings.
      summary: Manage bookings
      tags:
      - Bookings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Booking'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Booking'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
              examples:
                BookingExample:
                  value:
                    id: 12
                    property: 5
                    user: 3
                    check_in: '2025-08-01'
                    check_out: '2025-08-05'
                    status: confirmed
                  summary: Booking example
          description: List of bookings retrieved successfully.
  /api/bookings/{bookingId}/:
    get:
      operationId: apiBookingsRetrieve
      description: Authenticated users can create and view their bookings. Hosts can
        view bookings for their properties. Only booking creators can modify or cancel
        bookings.
      summary: Manage bookings
      parameters:
      - in: path
        name: bookingId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Booking.
        required: true
      tags:
      - Bookings
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
              examples:
                BookingExample:
                  value:
                    id: 12
                    property: 5
                    user: 3
                    check_in: '2025-08-01'
                    check_out: '2025-08-05'
                    status: confirmed
                  summary: Booking example
          description: List of bookings retrieved successfully.
    put:
      operationId: apiBookingsUpdate
      description: Authenticated users can create and view their bookings. Hosts can
        view bookings for their properties. Only booking creators can modify or cancel
        bookings.
      summary: Manage bookings
      parameters:
      - in: path
        name: bookingId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Booking.
        required: true
      tags:
      - Bookings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Booking'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Booking'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
              examples:
                BookingExample:
                  value:
                    id: 12
                    property: 5
                    user: 3
                    check_in: '2025-08-01'
                    check_out: '2025-08-05'
                    status: confirmed
                  summary: Booking example
          description: List of bookings retrieved successfully.
    patch:
      operationId: apiBookingsPartialUpdate
      description: Authenticated users can create and view their bookings. Hosts can
        view bookings for their properties. Only booking creators can modify or cancel
        bookings.
      summary: Manage bookings
      parameters:
      - in: path
        name: bookingId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Booking.
        required: true
      tags:
      - Bookings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBooking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBooking'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBooking'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
              examples:
                BookingExample:
                  value:
                    id: 12
                    property: 5
                    user: 3
                    check_in: '2025-08-01'
                    check_out: '2025-08-05'
                    status: confirmed
                  summary: Booking example
          description: List of bookings retrieved successfully.
    delete:
      operationId: apiBookingsDestroy
      description: Authenticated users can create and view their bookings. Hosts can
        view bookings for their properties. Only booking creators can modify or cancel
        bookings.
      summary: Manage bookings
      parameters:
      - in: path
        name: bookingId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Booking.
        required: true
      tags:
      - Bookings
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
              examples:
                BookingExample:
                  value:
                    id: 12
                    property: 5
                    user: 3
                    check_in: '2025-08-01'
                    check_out: '2025-08-05'
                    status: confirmed
                  summary: Booking example
          description: List of bookings retrieved successfully.
  /api/messages/:
    get:
      operationId: apiMessagesList
      description: Authenticated users can send messages to each other. A user can
        only view messages they sent or received. Only senders can edit or delete
        messages.
      summary: Send and receive user messages
      tags:
      - Messages
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
              examples:
                MessageExample:
                  value:
                  - id: 7
                    sender: 3
                    receiver: 4
                    content: Hi, is the property available?
                    timestamp: '2025-08-01T14:30:00Z'
                  summary: Message example
          description: List of messages retrieved successfully.
    post:
      operationId: apiMessagesCreate
      description: Authenticated users can send messages to each other. A user can
        only view messages they sent or received. Only senders can edit or delete
        messages.
      summary: Send and receive user messages
      tags:
      - Messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                MessageExample:
                  value:
                    id: 7
                    sender: 3
                    receiver: 4
                    content: Hi, is the property available?
                    timestamp: '2025-08-01T14:30:00Z'
                  summary: Message example
          description: List of messages retrieved successfully.
  /api/messages/{messageId}/:
    get:
      operationId: apiMessagesRetrieve
      description: Authenticated users can send messages to each other. A user can
        only view messages they sent or received. Only senders can edit or delete
        messages.
      summary: Send and receive user messages
      parameters:
      - in: path
        name: messageId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Message.
        required: true
      tags:
      - Messages
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                MessageExample:
                  value:
                    id: 7
                    sender: 3
                    receiver: 4
                    content: Hi, is the property available?
                    timestamp: '2025-08-01T14:30:00Z'
                  summary: Message example
          description: List of messages retrieved successfully.
    put:
      operationId: apiMessagesUpdate
      description: Authenticated users can send messages to each other. A user can
        only view messages they sent or received. Only senders can edit or delete
        messages.
      summary: Send and receive user messages
      parameters:
      - in: path
        name: messageId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Message.
        required: true
      tags:
      - Messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                MessageExample:
                  value:
                    id: 7
                    sender: 3
                    receiver: 4
                    content: Hi, is the property available?
                    timestamp: '2025-08-01T14:30:00Z'
                  summary: Message example
          description: List of messages retrieved successfully.
    patch:
      operationId: apiMessagesPartialUpdate
      description: Authenticated users can send messages to each other. A user can
        only view messages they sent or received. Only senders can edit or delete
        messages.
      summary: Send and receive user messages
      parameters:
      - in: path
        name: messageId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Message.
        required: true
      tags:
      - Messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                MessageExample:
                  value:
                    id: 7
                    sender: 3
                    receiver: 4
                    content: Hi, is the property available?
                    timestamp: '2025-08-01T14:30:00Z'
                  summary: Message example
          description: List of messages retrieved successfully.
    delete:
      operationId: apiMessagesDestroy
      description: Authenticated users can send messages to each other. A user can
        only view messages they sent or received. Only senders can edit or delete
        messages.
      summary: Send and receive user messages
      parameters:
      - in: path
        name: messageId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Message.
        required: true
      tags:
      - Messages
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                MessageExample:
                  value:
                    id: 7
                    sender: 3
                    receiver: 4
                    content: Hi, is the property available?
                    timestamp: '2025-08-01T14:30:00Z'
                  summary: Message example
          description: List of messages retrieved successfully.
  /api/payments/:
    get:
      operationId: apiPaymentsList
      description: View and create payments related to bookings. Only admins can update
        or delete payments.
      summary: Handle payments for bookings
      tags:
      - Payments
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
              examples:
                PaymentExample:
                  value:
                  - id: 1
                    booking: 12
                    amount: 400
                    status: completed
                    date: '2025-08-01'
                  summary: Payment example
          description: List of payments retrieved successfully.
    post:
      operationId: apiPaymentsCreate
      description: View and create payments related to bookings. Only admins can update
        or delete payments.
      summary: Handle payments for bookings
      tags:
      - Payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Payment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Payment'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
              examples:
                PaymentExample:
                  value:
                    id: 1
                    booking: 12
                    amount: 400
                    status: completed
                    date: '2025-08-01'
                  summary: Payment example
          description: List of payments retrieved successfully.
  /api/payments/{paymentId}/:
    get:
      operationId: apiPaymentsRetrieve
      description: View and create payments related to bookings. Only admins can update
        or delete payments.
      summary: Handle payments for bookings
      parameters:
      - in: path
        name: paymentId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Payment.
        required: true
      tags:
      - Payments
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
              examples:
                PaymentExample:
                  value:
                    id: 1
                    booking: 12
                    amount: 400
                    status: completed
                    date: '2025-08-01'
                  summary: Payment example
          description: List of payments retrieved successfully.
    put:
      operationId: apiPaymentsUpdate
      description: View and create payments related to bookings. Only admins can update
        or delete payments.
      summary: Handle payments for bookings
      parameters:
      - in: path
        name: paymentId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Payment.
        required: true
      tags:
      - Payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Payment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Payment'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
              examples:
                PaymentExample:
                  value:
                    id: 1
                    booking: 12
                    amount: 400
                    status: completed
                    date: '2025-08-01'
                  summary: Payment example
          description: List of payments retrieved successfully.
    patch:
      operationId: apiPaymentsPartialUpdate
      description: View and create payments related to bookings. Only admins can update
        or delete payments.
      summary: Handle payments for bookings
      parameters:
      - in: path
        name: paymentId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Payment.
        required: true
      tags:
      - Payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPayment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPayment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPayment'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
              examples:
                PaymentExample:
                  value:
                    id: 1
                    booking: 12
                    amount: 400
                    status: completed
                    date: '2025-08-01'
                  summary: Payment example
          description: List of payments retrieved successfully.
    delete:
      operationId: apiPaymentsDestroy
      description: View and create payments related to bookings. Only admins can update
        or delete payments.
      summary: Handle payments for bookings
      parameters:
      - in: path
        name: paymentId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Payment.
        required: true
      tags:
      - Payments
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
              examples:
                PaymentExample:
                  value:
                    id: 1
                    booking: 12
                    amount: 400
                    status: completed
                    date: '2025-08-01'
                  summary: Payment example
          description: List of payments retrieved successfully.
  /api/properties/:
    get:
      operationId: apiPropertiesList
      description: View, create, update, and delete properties. Only property owners
        can edit or delete their listings.
      summary: Manage property listings
      tags:
      - Properties
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NestedProperty'
              examples:
                PropertyExample:
                  value:
                  - id: 1
                    name: Beach House
                    location: Miami, FL
                    price_per_night: 200
                    host: 3
                  summary: Property example
          description: List of properties retrieved successfully.
    post:
      operationId: apiPropertiesCreate
      description: View, create, update, and delete properties. Only property owners
        can edit or delete their listings.
      summary: Manage property listings
      tags:
      - Properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedProperty'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NestedProperty'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NestedProperty'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedProperty'
              examples:
                PropertyExample:
                  value:
                    id: 1
                    name: Beach House
                    location: Miami, FL
                    price_per_night: 200
                    host: 3
                  summary: Property example
          description: List of properties retrieved successfully.
  /api/properties/{propertyId}/:
    get:
      operationId: apiPropertiesRetrieve
      description: View, create, update, and delete properties. Only property owners
        can edit or delete their listings.
      summary: Manage property listings
      parameters:
      - in: path
        name: propertyId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Property.
        required: true
      tags:
      - Properties
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedProperty'
              examples:
                PropertyExample:
                  value:
                    id: 1
                    name: Beach House
                    location: Miami, FL
                    price_per_night: 200
                    host: 3
                  summary: Property example
          description: List of properties retrieved successfully.
    put:
      operationId: apiPropertiesUpdate
      description: View, create, update, and delete properties. Only property owners
        can edit or delete their listings.
      summary: Manage property listings
      parameters:
      - in: path
        name: propertyId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Property.
        required: true
      tags:
      - Properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedProperty'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NestedProperty'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NestedProperty'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedProperty'
              examples:
                PropertyExample:
                  value:
                    id: 1
                    name: Beach House
                    location: Miami, FL
                    price_per_night: 200
                    host: 3
                  summary: Property example
          description: List of properties retrieved successfully.
    patch:
      operationId: apiPropertiesPartialUpdate
      description: View, create, update, and delete properties. Only property owners
        can edit or delete their listings.
      summary: Manage property listings
      parameters:
      - in: path
        name: propertyId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Property.
        required: true
      tags:
      - Properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNestedProperty'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNestedProperty'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNestedProperty'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedProperty'
              examples:
                PropertyExample:
                  value:
                    id: 1
                    name: Beach House
                    location: Miami, FL
                    price_per_night: 200
                    host: 3
                  summary: Property example
          description: List of properties retrieved successfully.
    delete:
      operationId: apiPropertiesDestroy
      description: View, create, update, and delete properties. Only property owners
        can edit or delete their listings.
      summary: Manage property listings
      parameters:
      - in: path
        name: propertyId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Property.
        required: true
      tags:
      - Properties
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedProperty'
              examples:
                PropertyExample:
                  value:
                    id: 1
                    name: Beach House
                    location: Miami, FL
                    price_per_night: 200
                    host: 3
                  summary: Property example
          description: List of properties retrieved successfully.
  /api/reviews/:
    get:
      operationId: apiReviewsList
      description: Anyone can view reviews. Authenticated users can create reviews.
        Only review authors can edit or delete them.
      summary: Manage property and booking reviews
      tags:
      - Reviews
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
              examples:
                ReviewExample:
                  value:
                  - id: 3
                    property: 1
                    user: 5
                    rating: 4
                    comment: Great stay, loved the place!
                    date: '2025-07-15'
                  summary: Review example
          description: List of reviews retrieved successfully.
    post:
      operationId: apiReviewsCreate
      description: Anyone can view reviews. Authenticated users can create reviews.
        Only review authors can edit or delete them.
      summary: Manage property and booking reviews
      tags:
      - Reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
              examples:
                ReviewExample:
                  value:
                    id: 3
                    property: 1
                    user: 5
                    rating: 4
                    comment: Great stay, loved the place!
                    date: '2025-07-15'
                  summary: Review example
          description: List of reviews retrieved successfully.
  /api/reviews/{reviewId}/:
    get:
      operationId: apiReviewsRetrieve
      description: Anyone can view reviews. Authenticated users can create reviews.
        Only review authors can edit or delete them.
      summary: Manage property and booking reviews
      parameters:
      - in: path
        name: reviewId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review.
        required: true
      tags:
      - Reviews
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
              examples:
                ReviewExample:
                  value:
                    id: 3
                    property: 1
                    user: 5
                    rating: 4
                    comment: Great stay, loved the place!
                    date: '2025-07-15'
                  summary: Review example
          description: List of reviews retrieved successfully.
    put:
      operationId: apiReviewsUpdate
      description: Anyone can view reviews. Authenticated users can create reviews.
        Only review authors can edit or delete them.
      summary: Manage property and booking reviews
      parameters:
      - in: path
        name: reviewId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review.
        required: true
      tags:
      - Reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
              examples:
                ReviewExample:
                  value:
                    id: 3
                    property: 1
                    user: 5
                    rating: 4
                    comment: Great stay, loved the place!
                    date: '2025-07-15'
                  summary: Review example
          description: List of reviews retrieved successfully.
    patch:
      operationId: apiReviewsPartialUpdate
      description: Anyone can view reviews. Authenticated users can create reviews.
        Only review authors can edit or delete them.
      summary: Manage property and booking reviews
      parameters:
      - in: path
        name: reviewId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review.
        required: true
      tags:
      - Reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReview'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
              examples:
                ReviewExample:
                  value:
                    id: 3
                    property: 1
                    user: 5
                    rating: 4
                    comment: Great stay, loved the place!
                    date: '2025-07-15'
                  summary: Review example
          description: List of reviews retrieved successfully.
    delete:
      operationId: apiReviewsDestroy
      description: Anyone can view reviews. Authenticated users can create reviews.
        Only review authors can edit or delete them.
      summary: Manage property and booking reviews
      parameters:
      - in: path
        name: reviewId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review.
        required: true
      tags:
      - Reviews
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
              examples:
                ReviewExample:
                  value:
                    id: 3
                    property: 1
                    user: 5
                    rating: 4
                    comment: Great stay, loved the place!
                    date: '2025-07-15'
                  summary: Review example
          description: List of reviews retrieved successfully.
  /api/token/:
    post:
      operationId: apiTokenCreate
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      security:
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: apiTokenRefreshCreate
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      security:
      - Bearer Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/:
    get:
      operationId: apiUsersList
      description: Provides read-only access to user profiles. Intended for public
        profile data retrieval.
      summary: Retrieve user information
      tags:
      - Users
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NestedUser'
          description: ''
  /api/users/{userId}/:
    get:
      operationId: apiUsersRetrieve
      description: Provides read-only access to user profiles. Intended for public
        profile data retrieval.
      summary: Retrieve user information
      parameters:
      - in: path
        name: userId
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User.
        required: true
      tags:
      - Users
      security:
      - jwtAuth: []
      - cookieAuth: []
      - Bearer Auth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedUser'
          description: ''
components:
  schemas:
    Booking:
      type: object
      description: Serializer for creating and retrieving bookings.
      properties:
        booking_id:
          type: string
          format: uuid
          readOnly: true
        property:
          allOf:
          - $ref: '#/components/schemas/NestedProperty'
          readOnly: true
          description: Details of the booked property (read-only).
        property_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the property being booked.
        user:
          allOf:
          - $ref: '#/components/schemas/NestedUser'
          readOnly: true
          description: Details of the guest making the booking (read-only).
        user_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the guest making the booking.
        start_date:
          type: string
          format: date
          description: The start date of the booking.
        end_date:
          type: string
          format: date
          description: The end date of the booking.
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          description: Total calculated price for the entire booking duration.
        status:
          type: string
          readOnly: true
          description: Current status of the booking (pending, confirmed, or canceled).
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the booking was created.
      required:
      - booking_id
      - created_at
      - end_date
      - property
      - property_id
      - start_date
      - status
      - total_price
      - user
      - user_id
    Message:
      type: object
      description: Serializer for sending and retrieving direct messages between users.
      properties:
        message_id:
          type: string
          format: uuid
          readOnly: true
        sender:
          allOf:
          - $ref: '#/components/schemas/NestedUser'
          readOnly: true
          description: Details of the sender (read-only).
        sender_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the user sending the message.
        receiver:
          allOf:
          - $ref: '#/components/schemas/NestedUser'
          readOnly: true
          description: Details of the recipient (read-only).
        receiver_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the message recipient.
        parent_message:
          type: string
          readOnly: true
          description: ID of the parent message if this is a reply.
        parent_message_id:
          type: string
          format: uuid
          writeOnly: true
          nullable: true
          description: Optional UUID of the parent message when replying.
        message_body:
          type: string
          description: Content of the message being sent.
        sent_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the message was sent.
        is_read:
          type: boolean
          readOnly: true
          description: Indicates if the message has been read.
        edited:
          type: boolean
          readOnly: true
          description: Indicates if the message has been edited.
        edited_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the message was last edited.
      required:
      - edited
      - edited_at
      - is_read
      - message_body
      - message_id
      - parent_message
      - receiver
      - receiver_id
      - sender
      - sender_id
      - sent_at
    NestedProperty:
      type: object
      description: Nested serializer for displaying basic property details.
      properties:
        property_id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier of the property.
        name:
          type: string
          readOnly: true
          description: The name of the property listing.
        location:
          type: string
          readOnly: true
          description: Location of the property.
        price_per_night:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          description: The price per night for booking this property.
      required:
      - location
      - name
      - price_per_night
      - property_id
    NestedUser:
      type: object
      description: Nested serializer for displaying basic user details (used in other
        serializers).
      properties:
        user_id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier of the user.
        first_name:
          type: string
          readOnly: true
          description: The first name of the user.
        last_name:
          type: string
          readOnly: true
          description: The last name of the user.
        email:
          type: string
          format: email
          readOnly: true
          description: The email address of the user.
      required:
      - email
      - first_name
      - last_name
      - user_id
    PatchedBooking:
      type: object
      description: Serializer for creating and retrieving bookings.
      properties:
        booking_id:
          type: string
          format: uuid
          readOnly: true
        property:
          allOf:
          - $ref: '#/components/schemas/NestedProperty'
          readOnly: true
          description: Details of the booked property (read-only).
        property_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the property being booked.
        user:
          allOf:
          - $ref: '#/components/schemas/NestedUser'
          readOnly: true
          description: Details of the guest making the booking (read-only).
        user_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the guest making the booking.
        start_date:
          type: string
          format: date
          description: The start date of the booking.
        end_date:
          type: string
          format: date
          description: The end date of the booking.
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          description: Total calculated price for the entire booking duration.
        status:
          type: string
          readOnly: true
          description: Current status of the booking (pending, confirmed, or canceled).
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the booking was created.
    PatchedMessage:
      type: object
      description: Serializer for sending and retrieving direct messages between users.
      properties:
        message_id:
          type: string
          format: uuid
          readOnly: true
        sender:
          allOf:
          - $ref: '#/components/schemas/NestedUser'
          readOnly: true
          description: Details of the sender (read-only).
        sender_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the user sending the message.
        receiver:
          allOf:
          - $ref: '#/components/schemas/NestedUser'
          readOnly: true
          description: Details of the recipient (read-only).
        receiver_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the message recipient.
        parent_message:
          type: string
          readOnly: true
          description: ID of the parent message if this is a reply.
        parent_message_id:
          type: string
          format: uuid
          writeOnly: true
          nullable: true
          description: Optional UUID of the parent message when replying.
        message_body:
          type: string
          description: Content of the message being sent.
        sent_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the message was sent.
        is_read:
          type: boolean
          readOnly: true
          description: Indicates if the message has been read.
        edited:
          type: boolean
          readOnly: true
          description: Indicates if the message has been edited.
        edited_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the message was last edited.
    PatchedNestedProperty:
      type: object
      description: Nested serializer for displaying basic property details.
      properties:
        property_id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier of the property.
        name:
          type: string
          readOnly: true
          description: The name of the property listing.
        location:
          type: string
          readOnly: true
          description: Location of the property.
        price_per_night:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          description: The price per night for booking this property.
    PatchedPayment:
      type: object
      description: Serializer for recording and retrieving payment details.
      properties:
        payment_id:
          type: string
          format: uuid
          readOnly: true
        booking:
          allOf:
          - $ref: '#/components/schemas/Booking'
          readOnly: true
          description: Details of the related booking (read-only).
        booking_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the booking for which the payment is made.
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Amount paid for the booking.
        payment_date:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the payment was recorded.
        payment_method:
          allOf:
          - $ref: '#/components/schemas/PaymentMethodEnum'
          description: |-
            Payment method used (credit_card, PayPal, or Stripe).

            * `credit_card` - Credit Card
            * `paypal` - PayPal
            * `stripe` - Stripe
    PatchedReview:
      type: object
      description: Serializer for creating and retrieving property reviews.
      properties:
        review_id:
          type: string
          format: uuid
          readOnly: true
        property:
          allOf:
          - $ref: '#/components/schemas/Property'
          readOnly: true
          description: Details of the property being reviewed (read-only).
        property_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the property being reviewed.
        user:
          allOf:
          - $ref: '#/components/schemas/NestedUser'
          readOnly: true
          description: Details of the user leaving the review (read-only).
        user_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the user leaving the review.
        rating:
          type: integer
          description: Rating for the property (1 to 5).
        comment:
          type: string
          description: Detailed review comment about the property.
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the review was created.
    Payment:
      type: object
      description: Serializer for recording and retrieving payment details.
      properties:
        payment_id:
          type: string
          format: uuid
          readOnly: true
        booking:
          allOf:
          - $ref: '#/components/schemas/Booking'
          readOnly: true
          description: Details of the related booking (read-only).
        booking_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the booking for which the payment is made.
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Amount paid for the booking.
        payment_date:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the payment was recorded.
        payment_method:
          allOf:
          - $ref: '#/components/schemas/PaymentMethodEnum'
          description: |-
            Payment method used (credit_card, PayPal, or Stripe).

            * `credit_card` - Credit Card
            * `paypal` - PayPal
            * `stripe` - Stripe
      required:
      - amount
      - booking
      - booking_id
      - payment_date
      - payment_id
      - payment_method
    PaymentMethodEnum:
      enum:
      - credit_card
      - paypal
      - stripe
      type: string
      description: |-
        * `credit_card` - Credit Card
        * `paypal` - PayPal
        * `stripe` - Stripe
    Property:
      type: object
      description: Serializer for creating and retrieving property listings.
      properties:
        property_id:
          type: string
          format: uuid
          readOnly: true
        host:
          allOf:
          - $ref: '#/components/schemas/NestedUser'
          readOnly: true
          description: Details of the host (read-only).
        host_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the user who owns this property.
        name:
          type: string
          description: The name of the property listing.
        description:
          type: string
          description: Detailed description of the property.
        location:
          type: string
          description: Location/address of the property.
        price_per_night:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Nightly rental price for the property.
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the property was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the property was last updated.
      required:
      - created_at
      - description
      - host
      - host_id
      - location
      - name
      - price_per_night
      - property_id
      - updated_at
    Review:
      type: object
      description: Serializer for creating and retrieving property reviews.
      properties:
        review_id:
          type: string
          format: uuid
          readOnly: true
        property:
          allOf:
          - $ref: '#/components/schemas/Property'
          readOnly: true
          description: Details of the property being reviewed (read-only).
        property_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the property being reviewed.
        user:
          allOf:
          - $ref: '#/components/schemas/NestedUser'
          readOnly: true
          description: Details of the user leaving the review (read-only).
        user_id:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the user leaving the review.
        rating:
          type: integer
          description: Rating for the property (1 to 5).
        comment:
          type: string
          description: Detailed review comment about the property.
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the review was created.
      required:
      - comment
      - created_at
      - property
      - property_id
      - rating
      - review_id
      - user
      - user_id
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
